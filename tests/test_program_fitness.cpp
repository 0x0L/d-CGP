#include <iostream>
#include <iomanip>
#include <random>
#include <cmath>
#include "../src/dcgp.h"


/// This tests that computing the fitness on data generated by the expression encoded in a program 
/// correctly account for a zero error

int main() {
    // creates a random program
    unsigned int n = 3;
    unsigned int m = 4;
    unsigned int r = 7;
    unsigned int c = 19;
    unsigned int l = 20;
    dcgp::program expression(n, m, r, c, l, dcgp::function_set::minimal, 1e-9);

    // creates 100 data points
    std::default_random_engine re;
    std::vector<std::vector<double> > in;
    std::vector<std::vector<double> > out;
    std::vector<double> in_point(n);
    std::vector<double> out_point(m);

    bool all_finite;
    do 
    {
        expression.mutate();
        all_finite=true;
        for (auto i = 0; i < 100; ++i)
        {
            for (auto j = 0u; j < n; ++j) 
            {
                in_point[j] = std::uniform_real_distribution<double>(-1, 1)(re);
            }
            out_point = expression.compute_f(in_point);
            for (auto k : out_point) {
std::cout << k << ", " << std::isfinite(k) << std::endl;
                if (!std::isfinite(k)) {
                    all_finite = false;
                }
            }
            in.push_back(in_point);
            out.push_back(out_point);
        }
    } while (!all_finite);
    std::vector<std::string> in_sym({"x","y","z"});
    std::cout << expression.compute_f(in_sym) << std::endl;
    std::cout << expression.fitness(in, out) << std::endl;

}


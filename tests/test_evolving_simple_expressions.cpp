#include <iostream>
#include <iomanip>
#include <random>
#include <cmath>
#include "../src/dcgp.h"

bool test_fails(
        unsigned int r,
        unsigned int c,
        unsigned int l,
        unsigned int N) // number of samples
{
   dcgp::program expression(1, 1, r, c, l, dcgp::function_set::minimal, 1e-9);

    // creates N data points 
    std::default_random_engine re;
    std::vector<std::vector<double> > in;
    std::vector<std::vector<double> > out;
    std::vector<double> in_point(1);
    std::vector<double> out_point(1);

    // Koza quintic polynomial x^5 - 2x^3 + x
    std::function<double(double)> f = [](double x){return x*x*x*x*x - 2*x*x*x + x;};

    for (auto i = 0u; i < N; ++i)
    {
        in_point[0] = std::uniform_real_distribution<double>(-1, 1)(re);
        out_point[0] = f(in_point[0]);
        in.push_back(in_point);
        out.push_back(out_point);
    }

    double fit;
    do
    {
        expression.mutate();
        fit = expression.fitness(in, out);
        std::cout << fit << std::endl;
    } while (fit < N);
    std::vector<std::string> in_sym({"x"});
    std::cout << expression.compute_f(in_sym) << std::endl;
    std::cout << in << std::endl;
    std::cout << out << std::endl;
    return true;
}

/// This tests that computing the fitness on data generated by the expression encoded in a program 
/// correctly account for a zero error
int main() {
    return test_fails(1,100,101, 100);
}

